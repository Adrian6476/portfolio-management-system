services:
  # Database Services
  postgres:
    image: crpi-uq4h40nqjrf2s1wo.cn-qingdao.personal.cr.aliyuncs.com/ghcr_io/postgres:15-alpine
    container_name: portfolio_postgres
    environment:
      POSTGRES_DB: portfolio_db
      POSTGRES_USER: portfolio_user
      POSTGRES_PASSWORD: portfolio_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfolio_user -d portfolio_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: crpi-uq4h40nqjrf2s1wo.cn-qingdao.personal.cr.aliyuncs.com/ghcr_io/redis:7-alpine
    container_name: portfolio_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message Broker
  nats:
    image: crpi-uq4h40nqjrf2s1wo.cn-qingdao.personal.cr.aliyuncs.com/ghcr_io/nats:2.10-alpine
    container_name: portfolio_nats
    ports:
      - "4222:4222"
      - "8222:8222"
      - "6222:6222"
    networks:
      - portfolio_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: portfolio_api_gateway
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - POSTGRES_URL=postgres://portfolio_user:portfolio_pass@postgres:5432/portfolio_db?sslmode=disable
      - REDIS_URL=redis:6379
      - NATS_URL=nats://nats:4222
      - FINNHUB_API_KEY=${FINNHUB_API_KEY}
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - portfolio_network
    restart: unless-stopped
    healthcheck:
      test: ["NONE"]

volumes:
  postgres_data:
  redis_data:

networks:
  portfolio_network:
    driver: bridge